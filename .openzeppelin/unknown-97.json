{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xf4cF6039e1918f92aeB5DAcD7977350BA569fB8F",
    "txHash": "0x3e508aecf8c725b9b0f406b9a18fa51e4188ac0862f419580c066bb4d79b7a28"
  },
  "proxies": [
    {
      "address": "0x63b9c4d45f1e89B725722Dafe9E0120fEa5b259a",
      "txHash": "0x2005fb96d9ed50e34c9d497bbd81fc320c562a962a68b08569120038a7eedb6b",
      "kind": "transparent"
    },
    {
      "address": "0x57793b3DA1803A6B34b9C207Ce1eC2B239AE5582",
      "txHash": "0x3063b14ca6a7eff8afdb7ea80cf29a305a112d186e5c369490159fe89d9d4c66",
      "kind": "transparent"
    },
    {
      "address": "0x70D2bA1Ad5A76dcaFb2Cb8e6CFD58D68195E605E",
      "txHash": "0x14a9624f4835f612aca495fb378cd7f892046a371c347222f4f3f41347a2b22e",
      "kind": "transparent"
    },
    {
      "address": "0xcac87BAA7C019A92Aa13a38D25Af9d4b928733CB",
      "txHash": "0xe5d175d4728e69561e1094220e793c6807c409ad75e6be7d571836598b6faf12",
      "kind": "transparent"
    },
    {
      "address": "0x1bf5Ca291fF1DE21a8047276719C94bF23755757",
      "txHash": "0xd9b6821e35eacb84b598f18bd192973757d8f50df7039223f0d158fc250f8f9e",
      "kind": "transparent"
    }
  ],
  "impls": {
    "447256d97135e9d96623ede08562727f68a1204e2a4c1852b1066f0dd6a12cd5": {
      "address": "0xfd1DFD532905B866F8531bB3f89F5b3FB425d3C8",
      "txHash": "0x6cda7fa00b7915598298f92ba97ac4c605370aa1c593719fe051a065b7f20962",
      "layout": {
        "storage": [
          {
            "label": "questions",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Question)4321_storage)dyn_storage",
            "contract": "BinaryMarketData",
            "src": "contracts\\BinaryMarketData.sol:24"
          },
          {
            "label": "markets",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(Market)4330_storage)",
            "contract": "BinaryMarketData",
            "src": "contracts\\BinaryMarketData.sol:30"
          },
          {
            "label": "tradeFees",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BinaryMarketData",
            "src": "contracts\\BinaryMarketData.sol:32"
          },
          {
            "label": "token",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20Upgradeable)2039",
            "contract": "BinaryMarketData",
            "src": "contracts\\BinaryMarketData.sol:34"
          },
          {
            "label": "_initialized",
            "offset": 20,
            "slot": "3",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 21,
            "slot": "3",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "54",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "106",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "107",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:522"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155BurnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\extensions\\ERC1155BurnableUpgradeable.sol:52"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155ReceiverUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\utils\\ERC1155ReceiverUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "254",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155HolderUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\utils\\ERC1155HolderUpgradeable.sol:48"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "304",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "354",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
          },
          {
            "label": "_questionIds",
            "offset": 0,
            "slot": "404",
            "type": "t_struct(Counter)2554_storage",
            "contract": "BinaryMarket",
            "src": "contracts\\BinaryMarket.sol:30"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Question)4321_storage)dyn_storage": {
            "label": "struct BinaryMarketData.Question[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)2039": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Market)4330_storage)": {
            "label": "mapping(uint256 => struct BinaryMarketData.Market)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2554_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Market)4330_storage": {
            "label": "struct BinaryMarketData.Market",
            "members": [
              {
                "label": "slot1",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "slot2",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "volume",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "reward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Question)4321_storage": {
            "label": "struct BinaryMarketData.Question",
            "members": [
              {
                "label": "meta",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "resolveTime",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "initialLiquidity",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "fee",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "slot",
                "type": "t_uint8",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "isPaused",
                "type": "t_bool",
                "offset": 2,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "f1a2eb26c856d3ff9e368e18265c705b9be90052341ed4f7ccdd73f5bb591d59": {
      "address": "0xe0beA8219ca42b6679AEE36C296D282F3f4C7045",
      "txHash": "0xdc15e149fa5a12e38205d6b785ea76f9231b111e6105d0a31743a198d8de5463",
      "layout": {
        "storage": [
          {
            "label": "questions",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Question)4336_storage)dyn_storage",
            "contract": "BinaryMarketData",
            "src": "contracts\\BinaryMarketData.sol:24"
          },
          {
            "label": "markets",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(Market)4345_storage)",
            "contract": "BinaryMarketData",
            "src": "contracts\\BinaryMarketData.sol:30"
          },
          {
            "label": "tradeFees",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BinaryMarketData",
            "src": "contracts\\BinaryMarketData.sol:32"
          },
          {
            "label": "token",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20Upgradeable)2039",
            "contract": "BinaryMarketData",
            "src": "contracts\\BinaryMarketData.sol:34"
          },
          {
            "label": "_initialized",
            "offset": 20,
            "slot": "3",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 21,
            "slot": "3",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "54",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "55",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "154",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "156",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "157",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:522"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155BurnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\extensions\\ERC1155BurnableUpgradeable.sol:52"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "254",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155ReceiverUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\utils\\ERC1155ReceiverUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "304",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155HolderUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\utils\\ERC1155HolderUpgradeable.sol:48"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "354",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "initialized",
            "offset": 0,
            "slot": "404",
            "type": "t_bool",
            "contract": "BinaryMarket",
            "src": "contracts\\BinaryMarket.sol:32"
          },
          {
            "label": "_questionIds",
            "offset": 0,
            "slot": "405",
            "type": "t_struct(Counter)2554_storage",
            "contract": "BinaryMarket",
            "src": "contracts\\BinaryMarket.sol:34"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Question)4336_storage)dyn_storage": {
            "label": "struct BinaryMarketData.Question[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)2039": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Market)4345_storage)": {
            "label": "mapping(uint256 => struct BinaryMarketData.Market)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2554_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Market)4345_storage": {
            "label": "struct BinaryMarketData.Market",
            "members": [
              {
                "label": "slot1",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "slot2",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "volume",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "reward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Question)4336_storage": {
            "label": "struct BinaryMarketData.Question",
            "members": [
              {
                "label": "meta",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "resolveTime",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "initialLiquidity",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "fee",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "slot",
                "type": "t_uint8",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "isPaused",
                "type": "t_bool",
                "offset": 2,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
